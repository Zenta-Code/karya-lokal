generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  externalId    String          @unique
  email         String          @unique
  username      String?         @unique
  password      String?
  authStrategy  String?
  image         String
  phone         String?
  firstName     String?
  lastName      String?
  Store         Store?
  Address       Address[]
  UserCart      UserCart[]
  UserOrder     UserOrder[]
  storeId       String?         @db.ObjectId
  ProductReview ProductReview[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("user")
}

model Store {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String            @unique @db.String
  logo            String
  banner          String?
  about           String?
  Address         Address[]
  StoreProduct    StoreProduct[]
  ProductDiscount ProductDiscount[]
  User            User?             @relation(fields: [userId], references: [id])
  userId          String?           @unique @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("store")
}

model Address {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  type    String
  address String
  city    String
  state   String
  zip     String
  country String
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
  Store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @db.ObjectId

  @@map("address")
}

model UserCart {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  userId  String         @db.ObjectId
  user    User           @relation(fields: [userId], references: [id])
  product StoreProduct[]

  @@map("user_cart")
}

model UserOrder {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  total     Float
  status    OrderStatus     @default(PENDING)
  userId    String          @db.ObjectId
  user      User            @relation(fields: [userId], references: [id])
  items     UserOrderItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("user_order")
}

model UserOrderItem {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Float
  order     UserOrder    @relation(fields: [orderId], references: [id])
  orderId   String       @db.ObjectId
  product   StoreProduct @relation(fields: [productId], references: [id])
  productId String       @db.ObjectId

  @@map("user_order_item")
}

model Category {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String?        @unique
  parentSlug String?        @db.String
  level      Int            @default(0)
  products   StoreProduct[]
  createdAt  DateTime?      @default(now())
  updatedAt  DateTime?      @updatedAt

  @@map("category")
}

model StoreProduct {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  categoryId  String           @db.ObjectId
  category    Category         @relation(fields: [categoryId], references: [id])
  variant     ProductVariant[]
  images      Json[]
  orderItems  UserOrderItem[]
  reviews     ProductReview[]
  Discount    ProductDiscount? @relation(fields: [discountId], references: [id])
  discountId  String?          @db.ObjectId
  UserCart    UserCart?        @relation(fields: [userCartId], references: [id])
  userCartId  String?          @db.ObjectId
  Store       Store?           @relation(fields: [storeName], references: [name])
  storeName   String?          @db.String
  isArchived  Boolean          @default(false)
  createdAt   DateTime?        @default(now())
  updatedAt   DateTime?        @updatedAt

  @@map("store_product")
}

model ProductVariant {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  productId String       @db.ObjectId
  product   StoreProduct @relation(fields: [productId], references: [id])
  values    Json[]

  @@map("product_variant")
}

model ProductReview {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  productId String       @db.ObjectId
  product   StoreProduct @relation(fields: [productId], references: [id])
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("product_review")
}

model ProductDiscount {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  percent     Int
  endDate     DateTime
  products    StoreProduct[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Store       Store?         @relation(fields: [storeId], references: [id])
  storeId     String?        @db.ObjectId

  @@map("product_discount")
}
